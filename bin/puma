#!/usr/bin/python

import sys, os
sys.path.append(os.environ["HOME"] + '/puma/lib')
import puma
puma = puma.Puma()
from optparse import OptionParser
parser = OptionParser()

class CLI:
    def launch(self, name, num, type):
        puma.run_instance(name, num, type)

    def list(self, arg):
        if arg == "images":
            for image in puma.get_image_list():
                print image
        if arg == "instances":
            for instance in puma.get_instance_list():
                print instance.id, "\t", instance.image_id, "\t", instance.instance_type, "\t", instance.dns_name, "\t", instance.state, "\t", instance.key_name


    def ssh(self, arg):
        try:
            int(arg[0])
            os.system("sudo ssh -i" + puma.puma_dir+"/creds/"+puma.config["keyfile"] + " " + arg)
        except:
            try:
                for instance in puma.get_instance_list():
                     if str(instance.id) == arg:
                         os.system("sudo ssh -i" + puma.puma_dir+"/creds/"+puma.config["keyfile"]+" "+instance.dns_name)
            except ValueError:
                print "ERROR: Instance does not exist"

    def term(self, name):
        puma.terminate_instance(name)

cli = CLI()

parser.add_option("--list", help="List instances or images", metavar="TYPE")
parser.add_option("--launch", help="launch an image", metavar="IMAGE")
parser.add_option("--ssh", help="ssh into an instance", metavar="INSTANCE")
parser.add_option("--term", help="terminates a specific instance", metavar="INSTANCE_ID")

(options, args) = parser.parse_args()

if options.list:
    if options.list == "images":
        cli.list("images")
    elif options.list == "instances":
        cli.list("instances")
    else:
        print "ERROR: Not a valid expression"

elif  options.launch:
    try:
        try:
            try:
                cli.launch(options.launch, int(args[0]), args[1])
            except:
                cli.launch(options.launch, int(args[0]), "m1.tiny")
        except:
            cli.launch(options.launch, 1, args[0])
    except:
        cli.launch(options.launch, 1, "m1.tiny")

elif options.ssh:
    cli.ssh(options.ssh)

elif options.term:
    args.append(options.term)
    cli.term(args)

elif options.list == None or options.ssh == None or options.launch == None or options.term == None:
    print "try \"puma -h\" for options"
else:
    print "ERROR: Not a valid expression"
